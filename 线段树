# https://codeforces.com/problemset/problem/1343/D

import sys

class SegmentTree:

    def __init__(self, count):
        count *= 4
        count += 5 
        self.minv = [0] * count
        self.addv = [0] * count
        self.left = 0
        self.right = count
        self.value = 0
        self.result_min = 0

    def maintain(self, o, L, R):
        l = o * 2
        r = o * 2 + 1

        self.minv[o] = 0
        if R > L:
            self.minv[o] = min(self.minv[l], self.minv[r])
        
        self.minv[o] += self.addv[o]

    def add(self, o, L, R):
        l = o * 2
        r = o * 2 + 1
        if self.left <= L and self.right >= R:
            self.addv[o] += self.value
        else:
            middle = int((L + R) / 2)
            if self.left <= middle:
                self.add(l, L, middle)
            if self.right > middle:
                self.add(r, middle + 1, R)
        self.maintain(o, L, R)

    def query(self, o, L, R, add):
        if self.left <= L and self.right >= R:
            self.result_min = min(self.result_min, self.minv[o] + add)
        else:
            middle = int((L + R) / 2)
            if self.left <= middle:
                self.query(o * 2, L, middle, add + self.addv[o])
            if self.right > middle:
                self.query(o * 2 + 1, middle + 1, R, add + self.addv[o])

# sys.stdin = open(r"./file/input.txt", 'r')
# sys.stdout = open(r"./file/output.txt", 'w')

t = int(input())

for _ in range(t):
    arr = input().split(" ")
    n = int(arr[0])
    k = int(arr[1])

    arr = input().split()
    arr = list(map(int, arr))

    tree = SegmentTree(k * 2)

    # ks = [0] * (k + 1)
    # print(ks)
    for i in range(int(n/2)):
        # for j in range(2, 2 * k + 1):
        #     left = arr[i]
        #     right = arr[n - i - 1]
        #     if left + right == j:
        #         ks[j] += 0
        #     else:
        #         if left >= j and right >= j:
        #             ks[j] += 2
        #         elif left + k < j and right + k < j:
        #             ks[j] += 2
        #         else:
        #             ks[j] += 1

        left = arr[i]
        right = arr[n - i - 1]

        if left > right:
            left, right = right, left

        """
        2 : [2, left], [right + k + 1, 2*k]
        1 ï¼š[left + 1, left + right - 1], [left + right + 1, right + k]
        0 : [left + right, left + right]
        """

        tree.left = 2
        tree.right = left
        tree.value = 2
        tree.add(1, 1, 2 * k)

        tree.left = right + k + 1
        tree.right = 2 * k
        tree.value = 2
        tree.add(1, 1, 2 * k)

        tree.left = left + 1
        tree.right = left + right - 1
        tree.value = 1
        tree.add(1, 1, 2 * k)

        tree.left = left + right + 1
        tree.right = right + k
        tree.value = 1
        tree.add(1, 1, 2 * k)

    tree.result_min = 99999999
    tree.left = 2
    tree.right = 2 * k
    tree.query(1, 1, 2 * k, 0)
    print(tree.result_min)
